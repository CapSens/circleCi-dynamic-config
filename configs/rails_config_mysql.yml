version: 2.1

parameters:
  project-name:
    type: string
    default: 'my-project' # must match mysql_username and mysql_database into database.yml.ci
  ruby-version:
    type: string
    default: "2.7.1"
  bundler-version:
    type: string
    default: "2.2.16"
  assets-bucket-staging:
    type: string
    default: ""
  assets-bucket-production:
    type: string
    default: ""
  ignored_cves:
    type: string
    default: ""
  install-redis:
    type: boolean
    default: false
  install-tesseract:
    type: boolean
    default: false
  tests-parallelism:
    type: integer
    default: 1

commands: # a reusable command with parameters
  setup_env:
    steps:
      - checkout
      - run:
          name: Database Config
          command: cp config/database.yml.ci config/database.yml
      - run:
          name: Install Bundler
          # mettre ici la meme version que celle utilisée pour générer le gemfile.lock sinon le cache ne marchera pas
          command: gem install bundler:<< pipeline.parameters.bundler-version >>
      - restore_cache:
         key: my-app-{{ checksum "Gemfile.lock" }}
      - run:
          name: Bundle install
          command: bundle install --path vendor/bundle
      - save_cache:
          key: my-app-{{ checksum "Gemfile.lock" }}
          paths:
              - vendor/bundle
      - when:
          condition: << pipeline.parameters.install-redis >>
          steps:
            - run:
                name: Redis
                command: |
                  apt-get install -y redis-server
                  service redis-server start
      - when:
          condition: << pipeline.parameters.install-tesseract >>
          steps:
            - run:
                name: Tesseract OCR
                command: |
                  apt-get install -y tesseract-ocr
      - run:
          name: Database initialization
          command: bundle exec rake db:create db:migrate
jobs:
  spec:
    working_directory: ~/<< pipeline.parameters.project-name >>
    docker:
      - image: capsens/ruby-node-yarn:<< pipeline.parameters.ruby-version >>
        environment:
          RAILS_ENV: test
      - image: circleci/mysql:5
        environment:
          MYSQL_ROOT_PASSWORD: rootpw
          MYSQL_DATABASE: << pipeline.parameters.project-name >>
          MYSQL_USER: << pipeline.parameters.project-name >>
          MYSQL_PASSWORD: << pipeline.parameters.project-name >>

    parallelism: << pipeline.parameters.tests-parallelism >>
    steps:
      - setup_env
      - run:
          name: Test
          command: |
            yarn
            circleci tests glob "spec/**/*_spec.rb" | circleci tests split > /tmp/tests-to-run
            bundle exec rspec $(cat /tmp/tests-to-run)
  assets:
    working_directory: ~/<< pipeline.parameters.project-name >>
    docker:
      - image: capsens/ruby-node-yarn:<< pipeline.parameters.ruby-version >>
        environment:
          RAILS_ENV: test
      - image: circleci/mysql:5
        environment:
          MYSQL_ROOT_PASSWORD: rootpw
          MYSQL_DATABASE: << pipeline.parameters.project-name >>
          MYSQL_USER: << pipeline.parameters.project-name >>
          MYSQL_PASSWORD: << pipeline.parameters.project-name >>
    steps:
      - setup_env
      - run:
          name: "Compile and serve assets"
          command: |
            if [ $CIRCLE_BRANCH == staging ]
            then
              export ASSETS_ENV=staging
              export S3_ASSETS_BUCKET=<< pipeline.parameters.assets-bucket-staging >>
            elif [ $CIRCLE_BRANCH == master ]
            then
              export ASSETS_ENV=production
              export S3_ASSETS_BUCKET=<< pipeline.parameters.assets-bucket-production >>
            else
              exit 0
            fi

            yarn
            RAILS_ENV=${ASSETS_ENV} bundle exec rake db:create db:migrate
            RAILS_ENV=${ASSETS_ENV} bundle exec rake assets:clobber assets:precompile
            aws s3 cp public/assets/ s3://${S3_ASSETS_BUCKET}/assets/ --recursive --acl public-read

            if [ -d "public/packs" ]; then
              aws s3 cp public/packs/ s3://${S3_ASSETS_BUCKET}/packs/ --recursive --acl public-read
            else
              echo "No public/packs directory, skipping packs upload."
            fi
  security_check:
    working_directory: ~/<< pipeline.parameters.project-name >>
    docker:
      - image: capsens/ruby-node-yarn:<< pipeline.parameters.ruby-version >>
        environment:
          RAILS_ENV: test
    steps:
      - checkout
      - run:
          name: "Audit Securité du Gemfile"
          command: |
            gem install bundler-audit

            IGNORE="<< pipeline.parameters.ignored_cves >>"
            set +e
            OAUTH_CRSF_FOUND=`grep -c -m1 omniauth-rails_csrf_protection Gemfile`
            SHRINE_CHECK=`grep -hrc derivation_endpoint -- config/initializers app/uploaders | awk '{s+=$1} END {print s}'`
            set -e
            if [ $OAUTH_CRSF_FOUND -eq 1 ]; then
              IGNORE="$IGNORE CVE-2015-9284"
            fi
            if [ $SHRINE_CHECK -eq 0 ]; then
              IGNORE="$IGNORE CVE-2020-15237"
            fi
            if [ -n "$IGNORE" ]; then
              IGNORE="--ignore $IGNORE"
            fi

            bundle audit --update $IGNORE
  code_review:
    working_directory: ~/<< pipeline.parameters.project-name >>
    docker:
      - image: capsens/ruby-node-yarn:<< pipeline.parameters.ruby-version >>
        environment:
          RAILS_ENV: test
    steps:
      - checkout
      - run:
          name: Coding style
          command: |
            gem install rubocop
            mkdir -p rubocop
            rubocop --format html -o rubocop/rubocop.html || true
      - run:
          name: Notation
          command: |
            gem install simplecov
            gem install rubycritic
            rubycritic app --no-browser
      - run:
          name: "Complexité cyclomatique"
          command: |
            gem install fukuzatsu
            fuku check app -f html
      - run:
          name: "Axe d'optimisation"
          command: |
            gem install fasterer
            cat \<< EOF > .fasterer.yml
            exclude_paths:
              - 'vendor/**/*.rb'
              - 'db/schema.rb'
            EOF
            fasterer || true
      - run:
          name: "Audit de securité de l'application"
          command: |
            gem install brakeman
            mkdir -p security
            brakeman -o security/brakeman.html || true
      - store_artifacts:
          path: security/brakeman.html
      - store_artifacts:
          path: rubocop/rubocop.html
      - store_artifacts:
          path: tmp/rubycritic
      - store_artifacts:
          path: doc/fukuzatsu/htm
      - store_artifacts:
          path: coverage
workflows:
    version: 2
    'workflow':
        jobs:
            - spec
            - security_check
            - assets:
                context:
                  - ASSETS
                filters:
                  branches:
                    only: ['master', 'staging']
                requires: ['spec', 'security_check']
            - code_review:
                filters:
                  branches:
                    only: ['master', 'staging']
