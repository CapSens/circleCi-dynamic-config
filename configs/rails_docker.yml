version: 2.1

orbs:
  terraform: circleci/terraform@3.1.0

parameters:
  project-name:
    type: string
    default: "my-project"
  ruby-version:
    type: string
    default: "3.2.2"
  bundler-version:
    type: string
    default: "2.4.10"
  # TODO: check if this parameter can be removed
  rails-version:
    type: string
    default: "7.0.0"
  required-variables:
    type: string
    default: ""
  build-and-deploy:
    type: boolean
    default: false
  deploy:
    type: boolean
    default: false
  tfvars:
    type: string
    default: ""

jobs:
  build:
    working_directory: /tmp/app
    environment:
      DOCKER_REGISTRY: 396522184519.dkr.ecr.eu-west-1.amazonaws.com
    docker:
      - image: cimg/aws:2023.09
    steps:
      - checkout
      # - setup_remote_docker
      # - restore_cache:
      #     keys:
      #       - v1-{{ .Branch }}
      #     paths:
      #       - /tmp/caches/app.tar
      # - run:
      #     name: Load Docker image layer cache
      #     command: |
      #       set +o pipefail
      #       docker load -i /tmp/caches/app.tar | true
      # - run:
      #     name: Download shared Dockerfile and utils
      #     command: |
      #       git clone --depth 1 --branch test-ci-build-vic git@github.com:CapSens/circleCi-dynamic-config.git dynamic_configs
      #       cp -R dynamic_configs/.dockerdev ./
      #       rm -rf dynamic_configs
      # - run:
      #     name: Build application Docker image
      #     command: |
      #       docker build -t "${DOCKER_REGISTRY}/<< pipeline.parameters.project-name >>:${CIRCLE_BRANCH}-${CIRCLE_SHA1}" \
      #         --build-arg RUBY_VERSION=<< pipeline.parameters.ruby-version >> \
      #         --build-arg RAILS_VERSION=<< pipeline.parameters.rails-version >> \
      #         --build-arg NODE_MAJOR=16 \
      #         --build-arg GITHUB_TOKEN=${GITHUB_TOKEN} \
      #         --build-arg GITHUB_TOKEN_DEV=${GITHUB_TOKEN_DEV} \
      #         --build-arg REQUIRED_VARIABLES="<< pipeline.parameters.required-variables >>" \
      #         --file .dockerdev/Dockerfile \
      #         .
      # - run:
      #     name: Save Docker image layer cache
      #     command: |
      #       mkdir -p /tmp/caches
      #       docker save -o /tmp/caches/app.tar ${DOCKER_REGISTRY}/<< pipeline.parameters.project-name >>:${CIRCLE_BRANCH}-${CIRCLE_SHA1}
      # - save_cache:
      #     key: v1-{{ .Branch }}-{{ epoch }}
      #     paths:
      #       - /tmp/caches/app.tar
      # - deploy:
      #     name: Push application Docker image
      #     command: |
      #       # if [ "${CIRCLE_BRANCH}" == "master" ]; then
      #         rm -rf ~/.aws
      #         aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${DOCKER_REGISTRY}
      #         docker push ${DOCKER_REGISTRY}/<< pipeline.parameters.project-name >>:${CIRCLE_BRANCH}-${CIRCLE_SHA1}
      #       # fi
  deploy:
    working_directory: ~/<< pipeline.parameters.project-name >>
    docker:
      - image: cimg/aws:2023.09
    steps:
      - checkout
      - run:
          name: Deploy docker image
          command: |
            echo "Deploy docker image"

      - run:
          name: Clone Terraform repository
          command: |
            git clone git@github.com:CapSens/terraform-infra.git terraform_infra

      - run:
          name: Show parameters
          command: |
            echo "Build and deploy: << pipeline.parameters.build-and-deploy >>"
            echo "Deploy: << pipeline.parameters.deploy >>"
            echo "Tfvars: << pipeline.parameters.tfvars >>"

      - run:
          name: Decrypt tfvars
          command: |
            decrypted_tfvars=$(
              echo "<< pipeline.parameters.tfvars >>" |
              openssl enc -base64 -d -aes-256-cbc -salt -pass pass:${TERRAFORM_ENCRYPTION_KEY} -pbkdf2
            )

            echo "decrypted_tfvars: $decrypted_tfvars"

      # - run:
      #     name: Terraform init
      #     command: |
      #       cd terraform_infra
      #       make init project=rails_application

workflows:
  version: 2

  workflow:
    when:
      and:
        - equal: [ false, << pipeline.parameters.build-and-deploy >> ]
        - equal: [ false, << pipeline.parameters.deploy >> ]

    jobs:
        - build:
            context:
              - GithubDev
              - Github
              - AWS_ECR

  build-and-deploy:
    when: << pipeline.parameters.build-and-deploy >>
    jobs:
        - build:
            context:
              - GithubDev
              - Github
              - AWS_ECR
        - deploy:
            context:
              - GithubDev
              - Github
              - AWS_ECR

  deploy:
    when: << pipeline.parameters.deploy >>
    jobs:
        - deploy:
            context:
              - GithubDev
              - Github
              - AWS_ECR
