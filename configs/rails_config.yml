version: 2.1

parameters:
  project-name:
    type: string
    default: 'my-project' # must match pg_username and pg_database into database.yml.ci
  ruby-version:
    type: string
    default: "2.7.1"
  bundler-version:
    type: string
    default: "2.2.16"
  assets-bucket-staging:
    type: string
    default: ""
  assets-bucket-production:
    type: string
    default: ""
  ignored_cves:
    type: string
    default: ""
  install-redis:
    type: boolean
    default: false
  install-tesseract:
    type: boolean
    default: false
  tests-parallelism:
    type: integer
    default: 1
  resource-class:
    type: string
    default: "medium"
  assets-resource-class: # platforms with webpacker needs a bigger instance than small
    type: string
    default: "small"
  js-framework:
    type: string
    default: sprockets

commands: # a reusable command with parameters
  setup_env:
    steps:
      - checkout
      - run:
          name: Database Config
          command: cp config/database.yml.ci config/database.yml
      - run:
          name: Install Bundler
          # mettre ici la meme version que celle utilisée pour générer le gemfile.lock sinon le cache ne marchera pas
          command: gem install bundler:<< pipeline.parameters.bundler-version >>
      - restore_cache:
         key: my-app-{{ checksum "Gemfile.lock" }}
      - run:
          name: Bundle install
          command: bundle install --path vendor/bundle
      - save_cache:
          key: my-app-{{ checksum "Gemfile.lock" }}
          paths:
              - vendor/bundle
      - when:
          condition: << pipeline.parameters.install-redis >>
          steps:
            - run:
                name: Redis
                command: |
                  apt-get install -y redis-server
                  service redis-server start
      - when:
          condition: << pipeline.parameters.install-tesseract >>
          steps:
            - run:
                name: Tesseract OCR
                command: |
                  apt-get install -y tesseract-ocr
      - run:
          name: Database initialization
          command: bundle exec rake db:create db:migrate
jobs:
  auto_cancel_redundant_workflows:
    docker:
      - image: cimg/base:2024.01
    steps:
      - run:
          name: "cancel_redundant_workflows"
          command: |
            ## Get the name of the workflow and the related pipeline number
            curl --header "Circle-Token: $CIRCLE_CI_TOKEN" --request GET "https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}" -o current_workflow.json
            WF_NAME=$(jq -r '.name' current_workflow.json)
            CURRENT_PIPELINE_NUM=$(jq -r '.pipeline_number' current_workflow.json)

            ## Get the IDs of pipelines created by the current user on the same branch. (Only consider pipelines that have a pipeline number inferior to the current pipeline)
            PIPE_IDS=$(curl --header "Circle-Token: $CIRCLE_CI_TOKEN" --request GET "https://circleci.com/api/v2/project/gh/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pipeline?branch=$CIRCLE_BRANCH"|jq -r --arg CIRCLE_USERNAME "$CIRCLE_USERNAME" --argjson CURRENT_PIPELINE_NUM "$CURRENT_PIPELINE_NUM" '.items[]|select(.state == "created")|select(.trigger.actor.login == $CIRCLE_USERNAME)|select(.number < $CURRENT_PIPELINE_NUM)|.id')

            ## Get the IDs of currently running/on_hold workflows that have the same name as the current workflow, in all previously created pipelines.
            if [ ! -z "$PIPE_IDS" ]; then
              for PIPE_ID in $PIPE_IDS
              do
                curl --header "Circle-Token: $CIRCLE_CI_TOKEN" --request GET "https://circleci.com/api/v2/pipeline/${PIPE_ID}/workflow"|jq -r --arg WF_NAME "${WF_NAME}" '.items[]|select(.status == "on_hold" or .status == "running") | select(.name == $WF_NAME) | .id' >> WF_to_cancel.txt
              done
            fi

            ## Cancel any currently running/on_hold workflow with the same name
            if [ -s WF_to_cancel.txt ]; then
              echo "Cancelling the following workflow(s):"
              cat WF_to_cancel.txt
              while read WF_ID;
                do
                  curl --header "Circle-Token: $CIRCLE_CI_TOKEN" --request POST https://circleci.com/api/v2/workflow/$WF_ID/cancel
                done < WF_to_cancel.txt
              ## Allowing some time to complete the cancellation
              sleep 2
              else
                echo "Nothing to cancel"
            fi
  spec:
    working_directory: ~/<< pipeline.parameters.project-name >>
    resource_class: << pipeline.parameters.resource-class >>
    docker:
      - image: capsens/ruby-node-yarn:<< pipeline.parameters.ruby-version >>
        environment:
          PGHOST: localhost
          PGUSER: << pipeline.parameters.project-name >>
          RAILS_ENV: test
      - image: cimg/redis:6.2.6
      - image: postgres:12
        environment:
          POSTGRES_USER: << pipeline.parameters.project-name >>
          POSTGRES_DB: << pipeline.parameters.project-name >>
          POSTGRES_PASSWORD: ""
          POSTGRES_HOST_AUTH_METHOD: trust
    parallelism: << pipeline.parameters.tests-parallelism >>
    steps:
      - setup_env
      - run:
          name: Test
          command: |
            yarn
            circleci tests glob "spec/**/*_spec.rb" | circleci tests split > /tmp/tests-to-run
            if [ << pipeline.parameters.js-framework >> == esbuild ]
            then
              bin/rails javascript:build
            fi
            bundle exec rspec $(cat /tmp/tests-to-run)
  assets:
    working_directory: ~/<< pipeline.parameters.project-name >>
    resource_class: << pipeline.parameters.assets-resource-class >>
    docker:
      - image: capsens/ruby-node-yarn:<< pipeline.parameters.ruby-version >>
        environment:
          PGHOST: localhost
          PGUSER: << pipeline.parameters.project-name >>
          RAILS_ENV: test
      - image: postgres:12
        environment:
          POSTGRES_USER: << pipeline.parameters.project-name >>
          POSTGRES_DB: << pipeline.parameters.project-name >>
          POSTGRES_PASSWORD: ""
          POSTGRES_HOST_AUTH_METHOD: trust
    steps:
      - setup_env
      - run:
          name: "Compile and serve assets"
          command: |
            if [ $CIRCLE_BRANCH == staging ]
            then
              export ASSETS_ENV=staging
              export S3_ASSETS_BUCKET=<< pipeline.parameters.assets-bucket-staging >>
            elif [ $CIRCLE_BRANCH == master ]
            then
              export ASSETS_ENV=production
              export S3_ASSETS_BUCKET=<< pipeline.parameters.assets-bucket-production >>
            else
              exit 0
            fi

            yarn
            RAILS_ENV=${ASSETS_ENV} bundle exec rake db:create db:migrate
            RAILS_ENV=${ASSETS_ENV} bundle exec rake assets:clobber assets:precompile
            aws s3 cp public/assets/ s3://${S3_ASSETS_BUCKET}/assets/ --recursive --acl public-read --cache-control max-age=${CACHE_MAX_AGE:-86400}

            if [ -d "public/packs" ]; then
              aws s3 cp public/packs/ s3://${S3_ASSETS_BUCKET}/packs/ --recursive --acl public-read --cache-control max-age=${CACHE_MAX_AGE:-86400}
            else
              echo "No public/packs directory, skipping packs upload."
            fi
  security_check:
    working_directory: ~/<< pipeline.parameters.project-name >>
    resource_class: small
    docker:
      - image: capsens/ruby-node-yarn:<< pipeline.parameters.ruby-version >>
        environment:
          RAILS_ENV: test
    steps:
      - checkout
      - run:
          name: "Audit Securité du Gemfile"
          command: |
            gem install bundler-audit

            IGNORE="<< pipeline.parameters.ignored_cves >>"
            set +e
            OAUTH_CRSF_FOUND=`grep -c -m1 omniauth-rails_csrf_protection Gemfile`
            SHRINE_CHECK=`grep -hrc derivation_endpoint -- config/initializers app/uploaders | awk '{s+=$1} END {print s}'`
            set -e
            if [ $OAUTH_CRSF_FOUND -eq 1 ]; then
              IGNORE="$IGNORE CVE-2015-9284"
            fi
            if [ $SHRINE_CHECK -eq 0 ]; then
              IGNORE="$IGNORE CVE-2020-15237"
            fi
            IGNORE="$IGNORE CVE-2023-51763"
            IGNORE="$IGNORE CVE-2024-26143"
            if [ -n "$IGNORE" ]; then
              IGNORE="--ignore $IGNORE"
            fi

            bundle audit --update $IGNORE
      - run:
          name: "Audit de securité de l'application"
          command: |
            gem install brakeman -v 5.4.1
            mkdir -p security
            brakeman -o security/brakeman.html || true
      - store_artifacts:
          path: security/brakeman.html
workflows:
    version: 2
    'workflow':
        jobs:
            - auto_cancel_redundant_workflows:
                context:
                  - COMMON
            - spec
            - security_check
            - assets:
                context:
                  - ASSETS
                filters:
                  branches:
                    only: ['master', 'staging']
                requires: ['spec', 'security_check']
